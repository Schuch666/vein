pckm <- fkm[[1]](1:24); pckma <- cumsum(pckm)
cod1 <- emis_det(po = "CO", cc = 1000, eu = "III", km = pckma[1:11])
cod2 <- emis_det(po = "CO", cc = 1000, eu = "I", km = pckma[12:24])
#vehicles newer than pre-euro
co1 <- fe2015[fe2015$Pollutant=="CO", ] #24 obs!!!
cod <- c(co1$PC_G[1:24]*c(cod1,cod2),co1$PC_G[25:nrow(co1)])
lef <- ef_ldv_scaled(co1, cod, v = "PC", t = "4S", cc = "<=1400",
f = "G",p = "CO", eu=co1$Euro_LDV)
E_CO <- emis(veh = pc1,lkm = net$lkm, ef = lef, speed = speed, agemax = 41,
profile = pc_profile, hour = 24, day = 7, array = T)
class(E_CO)
E_CO_STREETS <- emis_post(arra = E_CO, pollutant = "CO", by = "streets_wide")
net@data <- cbind(net@data, E_CO_STREETS)
head(net@data)
g <- make_grid(net, 1/102.47/2, 1/102.47/2) #500m in degrees
net@data <- net@data[,- c(1:9)]
names(net)
E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
head(E_CO_g) #class sf
library(mapview)
mapview(E_CO_g, zcol= "V1", legend = T)
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
#' net@data <- net@data[,- c(1:9)]
#' names(net)
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
df <- df[nrow(df):1, ]
e <- array(unlist(df), c(cols, rows, times))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
#' net@data <- net@data[,- c(1:9)]
#' names(net)
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
df <- df[nrow(df):1, ]
df <- apply(df, c(2,2), rev)
e <- array(unlist(df), c(cols, rows, times))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
df <- apply(df, 2, rev)
#' net@data <- net@data[,- c(1:9)]
#' names(net)
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
df <- df[nrow(df):1, ]
df <- apply(df, 2, rev)
e <- array(unlist(df), c(cols, rows, times))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' plot(gr)
flip
image(matrix(data = df[, 1], nrow = rows, ncol = cols))
cols = 19; cols = 23
image(matrix(data = df[, 1], nrow = rows, ncol = cols))
rowsum() = 19; cols = 23
rows = 19; cols = 23
image(matrix(data = df[, 1], nrow = rows, ncol = cols))
image(matrix(data = E_CO_g[, 1], nrow = rows, ncol = cols))
E_CO_g[, 1]
as.numeric(E_CO_g[, 1])
as.numeric(E_CO_g$V1)
E_CO_g$V1
image(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols))
image(t(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols)))
plot(t(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols)))
image(t(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols)))
length(E_CO_g$V1)
rows*cols
length(E_CO_g$V1)
image(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols))
plot(gr)
image(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows))
image(t(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows)))
image(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows))
image(matrix(data = rev(E_CO_g$V1), nrow = cols, ncol = rows))
image(t(matrix(data = rev(E_CO_g$V1), nrow = cols, ncol = rows)))
image(t(t(matrix(data = rev(E_CO_g$V1), nrow = cols, ncol = rows))))
image(matrix(data = rev(E_CO_g$V1), nrow = cols, ncol = rows))
image(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows))
image(solve(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows), -1)
)
m <- matrix(data = E_CO_g$V1, nrow = cols, ncol = rows)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(m))
rotate <- function(x) apply(x, 2, rev)
image(rotate(m))
image(t(rotate(m)))
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(rotate(m)))
image(rotate(rotate(rotate(m))))
image(rotate(rotate(rotate(m))), col = cptcity::cptcity(1))
image(rotate(rotate(m)), col = cptcity::cptcity(1))
image(rotate(m), col = cptcity::cptcity(1))
image(rotate(rotate(m)), col = cptcity::cptcity(3))
image(rotate(rotate(m)), col = cptcity::cptcity(2))
image(m, col = cptcity::cptcity(2))
image(rotate(m), col = cptcity::cptcity(2))
image(t(rotate(m)), col = cptcity::cptcity(2))
image(rotate(t(rotate(m))), col = cptcity::cptcity(2))
image(t(rotate(t(rotate(m)))), col = cptcity::cptcity(2))
image(m, col = cptcity::cptcity(2))
image(apply(t(m),2,rev), col = cptcity::cptcity(2))
image(apply(m,2,rev), col = cptcity::cptcity(2))
image(t(m[nrow(m):1,]), col = cptcity::cptcity(2))
image(m[nrow(m):1,], col = cptcity::cptcity(2))
image(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows, byrow = T), col = cptcity::cptcity(1)
)
image(matrix(data = E_CO_g$V1, nrow = cols, ncol = rows, byrow = T), col = cptcity::cptcity(1))
image(matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T), col = cptcity::cptcity(1))
m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
image(m, col = cptcity::cptcity(2)))
image(m, col = cptcity::cptcity(2))
image(t(m), col = cptcity::cptcity(2))
image(rotate(m), col = cptcity::cptcity(2))
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
#' image(rotate(m), col = cptcity::cptcity(2))
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
e <- simplify2array(lapply(1:ncol(df), function(i){
matrix(data = df[, i], nrow = rows, ncol = cols, byrow = T)
}))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
image(rotate(m), col = cptcity::cptcity(2))
plot(gr)
rotate
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
#' image(rotate(m), col = cptcity::cptcity(2))
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
e <- simplify2array(lapply(1:ncol(df), function(i){
t(apply(matrix(data = df[, i],
nrow = rows,
ncol = cols,
byrow = T),
2,
rev))
}))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
#' image(rotate(m), col = cptcity::cptcity(2))
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
e <- simplify2array(lapply(1:ncol(df), function(i){
t(apply(matrix(data = df[, i],
nrow = rows,
ncol = cols,
byrow = T),
2,
rev))
}))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], ...)
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
plot(gr, col = cptcity::cptcity(2))
plot(gr)
plot(gr, col = cptcity::cptcity(1))
plot(gr, col = cptcity::cptcity(4))
plot(gr, col = cptcity::cptcity(3))
plot(gr, col = cptcity::cptcity(2))
plot(gr, col = cptcity::cptcity(1))
mapview(E_CO_g, zcol= "V1", legend = T, col = inferno)
mapview(E_CO_g, zcol= "V1", legend = T, col = cptcity::cptcity(1))
?mapview
mapview(E_CO_g, zcol= "V1", legend = T, col.regions = cptcity::cptcity(1))
plot(gr, times = 165)
plot(gr, times = 16)
plot(gr, times = 19)
lapply(gr, plot, times)
lapply(gr, plot)
plot(gr, cptcity(1))
plot(gr, cptcity::cptcity(1))
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
plot(gr, col = cptcity::cptcity(1))
# For some cptcity color gradients:
plot(gr, col = cptcity::cptcity(1))
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(vein)
pkgdown::build_site()
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
library(vein)
devtools::load_all(".")
library(vein)
pkgdown::build_site()
pkgdown::build_site()
