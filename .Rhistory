}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
image(rotate(m), col = cptcity::cptcity(2))
plot(gr)
rotate
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
#' image(rotate(m), col = cptcity::cptcity(2))
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
e <- simplify2array(lapply(1:ncol(df), function(i){
t(apply(matrix(data = df[, i],
nrow = rows,
ncol = cols,
byrow = T),
2,
rev))
}))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], col = grDevices::terrain.colors(12))
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
#' E_CO_g <- emis_grid(spobj = net, g = g, sr= 31983)
#' head(E_CO_g) #class sf
#' library(mapview)
#' mapview(E_CO_g, zcol= "V1", legend = T)
#' gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
#' m <- matrix(data = E_CO_g$V1, nrow = rows, ncol = cols, byrow = T)
#' image(rotate(m), col = cptcity::cptcity(2))
#' plot(gr)
#' }
#' @export
GriddedEmissionsArray <- function(x, ..., cols, rows, times = ncol(x)) {
x$id <- NULL
if(inherits(x, "Spatial")){
df <- sf::st_as_sf(x)
df <- sf::st_set_geometry(x, NULL)
} else if(inherits(x, "sf")){
df <- sf::st_set_geometry(x, NULL)
}
for (i in 1:ncol(df)) {
df[, i] <- as.numeric(df[, i])
}
e <- simplify2array(lapply(1:ncol(df), function(i){
t(apply(matrix(data = df[, i],
nrow = rows,
ncol = cols,
byrow = T),
2,
rev))
}))
class(e) <- c("GriddedEmissionsArray",class(e))
cat("This GriddedEmissionsArray has:\n",
rows, "lat points\n",
cols, "lon points\n",
times,  "hours\n")
return(e)
}
#' @rdname GriddedEmissionsArray
#' @method print GriddedEmissionsArray
#' @export
print.GriddedEmissionsArray <- function(x,  ...) {
e <- x
if (is.array(e)) {
cat("This GriddedEmissionsArray has:\n",
dim(e)[1], "lat points\n",
dim(e)[2], "lon points\n",
dim(e)[3], "hours\n\n")
print(utils::head(e))
}
}
#' @rdname GriddedEmissionsArray
#' @method summary GriddedEmissionsArray
#' @export
summary.GriddedEmissionsArray <- function(object, ...) {
e <- object
summary(e[ , ,  ])
}
#' @rdname GriddedEmissionsArray
#' @method plot GriddedEmissionsArray
#' @export
plot.GriddedEmissionsArray <- function(x, ..., times = 1) {
e <- x
graphics::image(e[ , , times], ...)
graphics::par(mfrow = c(1, 1))
}
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
plot(gr, col = cptcity::cptcity(2))
plot(gr)
plot(gr, col = cptcity::cptcity(1))
plot(gr, col = cptcity::cptcity(4))
plot(gr, col = cptcity::cptcity(3))
plot(gr, col = cptcity::cptcity(2))
plot(gr, col = cptcity::cptcity(1))
mapview(E_CO_g, zcol= "V1", legend = T, col = inferno)
mapview(E_CO_g, zcol= "V1", legend = T, col = cptcity::cptcity(1))
?mapview
mapview(E_CO_g, zcol= "V1", legend = T, col.regions = cptcity::cptcity(1))
plot(gr, times = 165)
plot(gr, times = 16)
plot(gr, times = 19)
lapply(gr, plot, times)
lapply(gr, plot)
plot(gr, cptcity(1))
plot(gr, cptcity::cptcity(1))
gr <- GriddedEmissionsArray(E_CO_g, rows = 19, cols = 23, times = 168)
plot(gr)
plot(gr, col = cptcity::cptcity(1))
# For some cptcity color gradients:
plot(gr, col = cptcity::cptcity(1))
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(vein)
pkgdown::build_site()
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
library(vein)
devtools::load_all(".")
library(vein)
pkgdown::build_site()
pkgdown::build_site()
devtools::load_all(".")
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(vein)
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
devtools::load_all(".")
library(vein)
library(vein)
pkgdown::build_site()
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
data(net)
grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
plot(grid, axes = T) #class f
sessionInfo()
height < 2
height <- 2
width <- 1
stopifnot(width != height)
stopifnot(width == height)
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(isList)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(isList)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(isList)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width)
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)!
gg <- sf::st_make_grid(x = net, cellsize = width)
return(gg)
}
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)
gg <- sf::st_make_grid(x = net, cellsize = width, ...)
return(gg)
}
library(vein)
#do not run
data(net)
grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
plot(grid, axes = T) #class f
class(grid)
length(grid)
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
#' # Project data
#' library(sf)
#' net <- sf::st_transform(sf::st_as_sf(net), 31982)
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' argument is deprecated")
}
net <- sf::st_as_sf(spobj)
stopifnot(width == height)
g <- sf::st_make_grid(x = net, cellsize = width, ...)
gg <- sf::st_sf(id = 1:length(g), geometry = g)
return(gg)
}
grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
class(grid)
plot(grid, axes = T) #class f
#' @return A grid of polygons class 'sf'
#' @importFrom sp bbox GridTopology SpatialGridDataFrame proj4string
#' @importFrom sf st_as_sf st_make_grid st_sf
#' @export
#' @examples \dontrun{
#' #do not run
#' data(net)
#' grid <- make_grid(net, width = 0.5/102.47) #500 mts
#' plot(grid, axes = T) #class f
#' }
make_grid <- function(spobj, width, height,  polygon, ...){
if(!missing(polygon)){
.Deprecated(msg = "'polygon' is deprecated")
} else if(!missing(height)){
.Deprecated(msg = "'height' is deprecated, use width only")
}
net <- sf::st_as_sf(spobj)
g <- sf::st_make_grid(x = net, cellsize = width, ...)
gg <- sf::st_sf(id = 1:length(g), geometry = g)
return(gg)
}
grid <- make_grid(net, width = 0.5/102.47) #500 mts
grid <- make_grid(net, width = 0.5/102.47, height = 0.5/102.47) #500 mts
devtools::load_all(".")
library(vein)
library(vein)
library(vein)
library(vein)
